{"ast":null,"code":"var _typeof = require(\"/Users/vishalverma/Vishal/My Data/Project/Vue-basics/untitled folder/blog-vue/node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.parse-int.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.search.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\n/*!\n * vue-text-middle-ellipsis v1.0.13\n * (c) 2020-present tardigrada777 <ntwrite@gmail.com>\n * Released under the MIT License.\n */\n!function (e, t) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : e.vueTextMiddleEllipsis = t();\n}(this, function () {\n  \"use strict\";\n\n  var e = function e(_e) {\n    var t = document.createElement(\"span\");\n    t.innerText = _e, t.style.position = \"fixed\", t.style.top = \"-777px\", document.body.appendChild(t);\n    var i = t.getBoundingClientRect().width;\n    return document.body.removeChild(t), i;\n  },\n      t = function t(_t, i) {\n    var n,\n        d,\n        r,\n        o = i.value,\n        l = _t.getAttribute(\"data-middle-ellipsis-original\"),\n        s = function (e) {\n      var t = window.getComputedStyle(e),\n          i = t.boxSizing,\n          n = t.borderWidth,\n          d = e.getBoundingClientRect().width;\n      return parseInt(n) > 0 && \"border-box\" !== i ? d - 2 * parseInt(n) : d;\n    }(_t),\n        u = e(l),\n        a = (d = (n = l).search(\" \"), r = e(n.slice(0, d)), e(n.slice(0, d + 2)) - r);\n\n    if (s < u) {\n      for (var c = +o, f = l.slice(l.length - c), p = e(\"...\") + e(f), m = Math.round(s - p), v = \"\", x = 0; m > 0;) {\n        var b = l[x],\n            g = e(b);\n        if (\" \" === b && (g = a), m - g < 0) break;\n        v += b, m -= g, x += 1;\n      }\n\n      v += \"...\" + f, _t.innerText = v;\n    } else _t.innerText = l;\n  };\n\n  return {\n    install: function install(e, i) {\n      e.directive(\"text-middle-ellipsis\", {\n        bind: function bind(e) {\n          var t = e.innerText;\n          e.setAttribute(\"data-middle-ellipsis-original\", t.trim());\n        },\n        inserted: t,\n        update: t\n      });\n    }\n  };\n});","map":{"version":3,"mappings":"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","names":["const","getActualWidthOfChars","chars","span","document","createElement","t","innerText","style","position","top","body","appendChild","width","getBoundingClientRect","removeChild","zipText","el","ref","textWithSpaces","spaceIndex","widthUpToSpace","value","text","getAttribute","parentWidth","window","getComputedStyle","boxSizing","borderWidth","parseInt","getActualElementWidth","realWidth","SPACE_WIDTH","search","slice","endOffset","rightPart","length","rightPartWidth","availableLeftWidth","Math","round","final","charIndex","char","charWidth","v","Vue","options","directive","bind","originalText","setAttribute","trim"],"sources":["../src/index.js"],"sourcesContent":["/**\n * Creates empty <span>.\n * @returns {HTMLSpanElement}\n */\nconst createEmptySpan = () => document.createElement('span');\n\n/**\n * Gets the real physical width of chars sequence.\n *\n * @param chars       Sequence of chars.\n * @returns {number}  Real physical width of chars sequence.\n */\nconst getActualWidthOfChars = (chars) => {\n  const span = createEmptySpan();\n  span.innerText = chars;\n  span.style.position = 'fixed';\n  span.style.top = '-777px';\n  document.body.appendChild(span);\n  const { width } = span.getBoundingClientRect();\n  document.body.removeChild(span);\n  return width;\n}\n\n/**\n * Gets the real physical width of space symbol.\n *\n * @param textWithSpaces   string, that contains space symbol.\n * @returns {number}       Real physical width of space symbol.\n */\nconst getActualWidthOfSpace = (textWithSpaces) => {\n  const spaceIndex = textWithSpaces.search(' ');\n  const widthUpToSpace = getActualWidthOfChars(textWithSpaces.slice(0, spaceIndex));\n  const widthAfterToSpace = getActualWidthOfChars(textWithSpaces.slice(0, spaceIndex + 2));\n  return widthAfterToSpace - widthUpToSpace;\n}\n\n/**\n * Gets actual width of element with checking on boxSizing strategy.\n *\n * @param el          HTML element.\n * @returns {number}  Real physical width of the Element.\n */\nconst getActualElementWidth = (el) => {\n  const BORDER_BOX = 'border-box';\n  const { boxSizing, borderWidth } = window.getComputedStyle(el);\n  const { width } = el.getBoundingClientRect();\n  return (parseInt(borderWidth) > 0 && boxSizing !== BORDER_BOX) ? width - parseInt(borderWidth) * 2 : width;\n}\n\n/**\n * Cuts the text of element and insert SEPARATOR(...) in the middle.\n *\n * @param el        HTMLElement with text content.\n * @param value     Value passed to vue-directive.\n */\nconst zipText = (el, { value }) => {\n  const text = el.getAttribute('data-middle-ellipsis-original');\n  const parentWidth = getActualElementWidth(el);\n  const realWidth = getActualWidthOfChars(text);\n  const SPACE_WIDTH = getActualWidthOfSpace(text);\n\n  if (parentWidth < realWidth) {\n    const endOffset = +value;\n    const SEPARATOR = '...';\n    const SPACE = ' ';\n    const rightPart = text.slice(text.length - endOffset);\n    const rightPartWidth = getActualWidthOfChars(SEPARATOR) + getActualWidthOfChars(rightPart);\n\n    let availableLeftWidth = Math.round(parentWidth - rightPartWidth);\n    let final = '';\n    let charIndex = 0;\n    while (availableLeftWidth > 0) {\n      const char = text[charIndex];\n\n      let charWidth = getActualWidthOfChars(char);\n\n      if (char === SPACE) {\n        charWidth = SPACE_WIDTH;\n      }\n\n      if (availableLeftWidth - charWidth < 0) {\n        break;\n      }\n\n      final += char;\n      availableLeftWidth -= charWidth;\n      charIndex += 1;\n    }\n    final += `${SEPARATOR}${rightPart}`;\n    el.innerText = final;\n  }\n  else {\n    el.innerText = text;\n  }\n}\n\nexport default {\n  install(Vue, options) {\n    Vue.directive('text-middle-ellipsis', {\n      bind: (el) => {\n        const originalText = el.innerText;\n        el.setAttribute('data-middle-ellipsis-original', originalText.trim());\n      },\n      inserted: zipText,\n      update: zipText\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}